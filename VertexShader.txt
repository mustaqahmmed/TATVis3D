// PHONG LIGHTING

#version 400 core

const int LightCount = 2;

layout(location = 0) in vec3 VertexPosition_MS;
layout(location = 1) in vec3 VertexNormal_MS;
layout(location = 2) in vec2 VertexTexCoord;

uniform mat4 ProjectMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelMatrix;

uniform vec3 LightPosition_WS[LightCount];
uniform vec3 LightAmbientColor[LightCount];
uniform vec3 LightDiffuseColor[LightCount];
uniform vec3 LightSpecularColor[LightCount];
uniform float LightConstantAttentuation[LightCount];
uniform float LightLinearAttentuation[LightCount];
uniform float LightQuadraticAttentuation[LightCount];
uniform bool LightEnable[LightCount];
uniform float MaterialShininess;

out vec3 LightAmbientFactor;
out vec3 LightDiffuseFactor;
out vec3 LightSpecularFactor;
out vec2 vTexCoord;

void main(void)
{
	gl_PointSize = 1.0;

	mat4 MVMatrix = ViewMatrix * ModelMatrix;
	vec4 v = vec4(VertexPosition_MS, 1.0);
    gl_Position = ProjectMatrix * MVMatrix * v;

	vTexCoord = VertexTexCoord;

	vec3 VertexPosition_CS = (MVMatrix * v).xyz;
	vec3 CameraDirection_CS = vec3(0, 0, 0) - VertexPosition_CS;
	vec3 Normal_CS = (MVMatrix * vec4(VertexNormal_MS, 0)).xyz;
	vec3 N = normalize(Normal_CS);

	LightAmbientFactor = vec3(0.0);
	LightDiffuseFactor = vec3(0.0);
	LightSpecularFactor = vec3(0.0);

	for(int light = 0; light < LightCount; light ++){
		if(!LightEnable[light])
		{
			continue;
		}

		vec3 LightPosition_CS = ( ViewMatrix * vec4(LightPosition_WS[light], 1)).xyz;
		vec3 LightDirection_CS = LightPosition_CS - VertexPosition_CS;
		float distance = length(LightDirection_CS);
		float attentuation;
		float K = LightConstantAttentuation[light] + LightLinearAttentuation[light]*distance + LightQuadraticAttentuation[light]*distance*distance;
		if(K <= 0.0)
			attentuation = 1.0;
		else
			attentuation = 1.0 / K;
		
		vec3 L = normalize(LightDirection_CS);
		vec3 E = normalize(CameraDirection_CS);
		vec3 R = reflect(-L, N);

		float diffuse = max(dot(N, L), 0.0);
		float specular = pow(max(dot(E, R), 0.0), MaterialShininess);

		LightAmbientFactor += LightAmbientColor[light] * attentuation;
		LightDiffuseFactor += diffuse * LightDiffuseColor[light] * attentuation;
		LightSpecularFactor += specular * LightSpecularColor[light] * attentuation;
	}
}
